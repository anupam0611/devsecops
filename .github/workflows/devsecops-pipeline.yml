name: DevSecOps Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  FLASK_APP: app.py
  FLASK_ENV: production
  DOCKER_IMAGE: ${{ secrets.DOCKER_REGISTRY }}/devsecops-app:${{ github.sha }}
  SESSION_TYPE: 'filesystem'

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required for TruffleHog

      - name: Run TruffleHog for Secrets Scanning
        uses: trufflesecurity/trufflehog@v3.30.0
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: |
            --only-verified
            --fail
            --json
            --entropy-threshold 4.5

      - name: Run Checkov for Infrastructure Security
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: |
            terraform
            dockerfile
          output: cli
          quiet: true
          skip-path: |
            .git
            .github
            node_modules
            venv
          soft-fail: false
          download-external-modules: true
          compact: true
          skip-check: |
            CKV_AWS_130
            CKV_AWS_126
          output-file-path: checkov-results.json

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black pytest pytest-cov

      - name: Run Flake8
        run: flake8 $(git ls-files '*.py')

      - name: Run Black
        run: black . --check

      - name: Run Unit Tests with Coverage
        run: |
          pytest --cov=./ --cov-report=xml
        continue-on-error: true

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  build-and-scan:
    name: Build and Scan Container
    needs: [security-scan, code-quality]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/devsecops-app:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/devsecops-app:buildcache,mode=max
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  deploy-staging:
    name: Deploy to Staging
    needs: build-and-scan
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag ${{ env.DOCKER_IMAGE }} $ECR_REGISTRY/${{ env.DOCKER_IMAGE }}
          docker push $ECR_REGISTRY/${{ env.DOCKER_IMAGE }}
      
      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster staging-cluster --service devsecops-service --force-new-deployment

  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag ${{ env.DOCKER_IMAGE }} $ECR_REGISTRY/${{ env.DOCKER_IMAGE }}
          docker push $ECR_REGISTRY/${{ env.DOCKER_IMAGE }}
      
      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster production-cluster --service devsecops-service --force-new-deployment
      
      - name: Run Post-deployment Tests
        run: |
          # Add your post-deployment tests here
          echo "Running post-deployment tests..."

permissions:
  contents: read
  packages: write
  pull-requests: write
  security-events: write